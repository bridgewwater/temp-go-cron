runmode: debug               # run mode: debug, release, test
name: temp-go-cron           # name of App
addr: :39000                 # HTTP port will cover by use env: ENV_CRON_HOST

base_path: /v1                     # api version
prod_url: http://127.0.0.1:39000   # prod url full ip:port
test_url: http://127.0.0.1:39000   # test url full ip:port
dev_url: http://127.0.0.1:39000     # dev url full ip:port
sslEnable: false                    # isEnable ssl mode this will cover by env ENV_CRON_HTTPS_ENABLE

log:
  writers: file,stdout            # file,stdout。`file` will let `logger_file` to file，`stdout` will show at std, most of time use bose
  logger_level: DEBUG             # log level: DEBUG, INFO, WARN, ERROR, FATAL
  logger_file: log/cron.log     # log file setting
  log_format_text: false           # format `true` will format json, `false` will show abs
  rollingPolicy: size             # rotate policy, can choose as: daily, size. `daily` store as daily，`size` will save as max
  log_rotate_date: 1              # rotate date, coordinate `rollingPolicy: daily`
  log_rotate_size: 8              # rotate size，coordinate `rollingPolicy: size`
  log_backup_count: 7             # backup max count, log system will compress the log file when log reaches rotate set, this set is max file count

zap:
  AtomicLevel: -1 # DebugLevel:-1 InfoLevel:0 WarnLevel:1 ErrorLevel:2
  Fields:
    Key: key
    Val: val
  Development: true # is open Open file and line number
  AddCaller: true # is open Development mode, stack trace
  Encoding: console # output format console or json
  rotate:
    Filename: log/go-cron.log # Log file path
    MaxSize: 128 # Maximum size of each log file Unit: M
    MaxBackups: 30 # How many backups are saved in the log file
    MaxAge: 365 # How many days can the file be keep
    Compress: true # need compress ?
  EncoderConfig:
    TimeKey: time
    LevelKey: level
    NameKey: logger
    CallerKey: caller
    MessageKey: msg
    StacktraceKey: stacktrace

monitor: # monitor
  status: true             # api status use {monitor.health}
  health: /status/health   # api health
  retryCount: 10           # ping api health retry count
  hardware: true           # hardware true or false
  status_hardware:
    disk: /status/hardware/disk     # hardware api disk
    cpu: /status/hardware/cpu       # hardware api cpu
    ram: /status/hardware/ram       # hardware api ram
  debug: true                       # debug true or false
  pprof: true                       # security true or false
  security: false                    # debug and security security true or false
  securityUser:
    admin: abcdefg # admin:pwd
